scalar Date
scalar URL

type User {
  id: ID!
  name: String!
  image: URL

  "I can't remember... I _think_ last time I did a project, I handled all the auth outside of graphql. That may not have been right, though?"
  token: string
}

type Room {
  id: ID!
  code: String!
  "_Perhaps_ we should just change this to admin?"
  dictator: User!
  players: [User]!
  gameVotes: [GameVote]!
  gameHistory: [GameHistory]

  dateCreated: Date!
}

type Game {
  id: ID!
  name: String!
  coverImage: URL
}

type GameVote {
  user: Player!
  game: Game!
}

"Might want to add a list of games that have been played?"
type GameHistory {
  game: Game!
  players: [User]!

  dateStarted: Date!
  dateEnded: Date!
}

type Query {
  user(id: String!): User
  Room(id: String!): Room
  roomByCode(code: String!): Room
  games: [Game]!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

input CreateLobbyInput {
  
}

type CreateRoomMutationResponse implements MutationResponse {
   code: String! 
   success: Boolean!
   message: String!
   room: Room
}

input JoinRoomInput {
  name: String!
  roomCode: String!
}

type JoinRoomMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  room: Room
  user: User
}

input VoteForGameInput {
  gameId: Id!
}

type VoteForGameMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: GameVote
}

type Mutation {
  createRoom(lobby: CreateRoomInput): CreateRoomMutationResponse
  joinRoom(join: JoinRoomInput): JoinRoomMutationResponse
  voteForGame(vote: VoteForGameInput): VoteForGameMutationResponse
}