scalar Date
scalar URL

type User {
  id: ID!
  username: String!
  nickname: String
  image: URL

  jwt: String
}

type Room {
  id: ID!
  code: String!
  leader: User!
  users: [User]!

  currentGame: Game!

  gameVotes: [GameVote]!
  gameHistory: [GameHistory]

  dateCreated: Date!
}

type Game {
  id: ID!
  name: String!
  coverImage: URL
}

type GameVote {
  user: User!
  game: Game!
}

"Might want to add a list of games that have been played?"
type GameHistory {
  game: Game!
  users: [User]!

  dateStarted: Date!
  dateEnded: Date!
}

type Query {
  user(id: String!): User
  room(id: String!): Room
  roomByCode(code: String!): Room
  games: [Game]!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

input CreateRoomInput {
  username: String!
}

type CreateRoomMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  room: Room
  user: User
}

input JoinRoomInput {
  username: String!
  roomCode: String!
}

type JoinRoomMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  room: Room
  user: User
}

input VoteForGameInput {
  gameId: ID!
}

type VoteForGameMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  vote: GameVote
}

type Mutation {
  createRoom(roomInput: CreateRoomInput): CreateRoomMutationResponse
  joinRoom(joinInput: JoinRoomInput): JoinRoomMutationResponse
  voteForGame(voteInput: VoteForGameInput): VoteForGameMutationResponse
}
